/*
 *     JMortar - Tools to make your Java life easier.
 *     Copyright (C) 2015-2018 Stephen Cheesley
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.logitopia.jmortar.core.service;

import com.logitopia.jmortar.core.service.exception.ServiceException;

/**
 * The Service interface defines the operations that a service can provide. All
 * implementers are a service and must implement these methods. Any errors
 * generated by the implemented methods should be logged and reported.
 */
public interface Service {
  
  /**
   * NEW - The service has been initialised but never started.
   */
  static final int NEW = 0;
  
  /**
   * STARTING - The service has been started.
   */
  static final int STARTING = 1;

  /**
   * RUNNING - The service is now fully up and running.
   */
  static final int RUNNING = 2;

  /**
   * STOPPING - The service is now in the process of stopping.
   */
  static final int STOPPING = 3;

  /**
   * STOPPED - The service has shutdown successfully.
   */
  static final int STOPPED = 4;

  /**
   * ERROR - The service has an error and is stuck in that state.
   */
  static final int ERROR = 5;

  /**
   * The <tt>getName</tt> method returns the name of this service. Whatever the
   * name of this service is set to upon construction is what will be returned
   * as a String.
   *
   * @return String The name of this service.
   */
  String getName();

  /**
   * The <tt>getStatus</tt> method returns the status of the service. Whatever
   * state the service is in when this method is executed is the value that will
   * be returned.
   *
   * @return int The state that the service is currently in.
   */
  int getStatus();

  /**
   * The <tt>isRunning</tt> method is a pointed accessor that determines whether
   * or not the service is running.
   *
   * @return boolean A flag indicating whether the service is running.
   */
  boolean isRunning();

  /**
   * The <tt>isStopped</tt> method is a pointed accessor that determines whether
   * the service has stopped cleanly.
   *
   * @return boolean A flag indicating whether the service has stopped.
   */
  boolean isStopped();

  /**
   * The <tt>isErrored</tt> method is a pointed accessor that determines whether
   * the service has stopped because of an error.
   *
   * @return boolean A flag indicating whether the service has errored.
   */
  boolean isErrored();

  /**
   * The <tt>start</tt> method initiates the service and is responsible for
   * setting the service status at every stage of initiation. The primary
   * responsibility of this method is to ensure that this service gets from new
   * or stopped to running.
   *
   * @throws ServiceException An exceptional state when the service is unable to
   * start.
   */
  void start() throws ServiceException;

  /**
   * The <tt>stop</tt> method terminates the service and sets the service status
   * at every stage of termination. The primary responsibility of this method is
   * to ensure that this service gets from running to stopped.
   *
   * @throws ServiceException An exceptional state when the service is unable to
   * stop.
   */
  void stop() throws ServiceException;
}
